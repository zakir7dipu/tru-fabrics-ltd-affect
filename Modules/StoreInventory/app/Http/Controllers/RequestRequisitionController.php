<?php
bolt_decrypt( __FILE__ , 'MEKMjt'); return 0;
##!!!##