<?php
bolt_decrypt( __FILE__ , 'WAhIkC'); return 0;
##!!!##