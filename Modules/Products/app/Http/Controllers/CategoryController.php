<?php
bolt_decrypt( __FILE__ , 'KmfSE5'); return 0;
##!!!##