<?php
bolt_decrypt( __FILE__ , 'EEPfdS'); return 0;
##!!!##